<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <description>Spring管理数据库配置</description>


    <!-- Druid数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="DriverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="maxActive" value="${db.maxActive}"/>
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${db.maxWait}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 逐出连接的检测时间间隔 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
        <!-- 最小逐出时间 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
        <!-- 测试有效用的SQL Query -->
        <property name="validationQuery" value="${db.validationQuery}"/>
        <!-- 连接空闲时测试是否有效 -->
        <property name="testWhileIdle" value="${db.testWhileIdle}"/>
        <!-- 获取连接时测试是否有效 -->
        <property name="testOnBorrow" value="${db.testOnBorrow}"/>
        <!-- 归还连接时是否测试有效 -->
        <property name="testOnReturn" value="${db.testOnReturn}"/>
        <!-- 监控 -->
        <property name="filters" value="wall,mergeStat"/>
        <!-- 日志保存 -->
        <property name="timeBetweenLogStatsMillis" value="300000" />
        <!-- 慢SQL记录 -->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 打开removeAbandoned功能 发生连接泄漏时开启 -->
        <!--<property name="removeAbandoned" value="true" />-->
        <!-- 1800秒，也就是30分钟 -->
        <!--<property name="removeAbandonedTimeout" value="1800" />-->
        <!-- 关闭abanded连接时输出错误日志 -->
        <!--<property name="logAbandoned" value="true" />-->
    </bean>


    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 别名 -->
        <property name="typeAliasesPackage" value="org.lohas.bf.dao.entities"/>

        <property name="configLocation" value="classpath:mybatis/configuration.xml"/>

        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations">
            <list>
                <value>
                    classpath:mybatis/sqlmap/${db.dialect}/**/*.xml
                </value>
            </list>
        </property>
    </bean>




    <!-- 扫描basePackage接口 dao层的实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.lohas.bf.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 事务管理，@Transactional("sw") -->
    <bean id="sw" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
        <qualifier type="org.springframework.beans.factory.annotation.Qualifier" value="sw" />
    </bean>


    <!-- jdbcTmpl dao -->
    <bean id="commonDao" class="org.lohas.bf.dao.common.JdbcTemplateDAO"></bean>

    <!-- spring-mongodb -->
    <import resource="spring-mongodb.xml"></import>


    <!-- 使用annotation定义数据库事务 -->
    <tx:annotation-driven transaction-manager="sw"  proxy-target-class="true" />

    <!-- 开启缓存 -->
    <!--
        <cache:annotation-driven />
    -->
    <!-- 属性文件配置 -->
    <beans profile="dev">
        <bean class="org.lohas.bf.dao.common.SYS_GLOBAL"
              lazy-init="false">
            <property name="locations">
                <list>
                    <value>classpath*:config_dev.properties</value>
                </list>
            </property>
        </bean>

        <!-- redis -->
        <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
            <property name="maxTotal" value="${redis.pool.maxTotal}" />
            <property name="maxIdle" value="${redis.pool.maxIdle}" />
            <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
            <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        </bean>
        <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
            <property name="hostName" value="${redis.host}"/>
            <property name="port" value="${redis.port}"/>
            <property name="password" value="${redis.pass}"/>
            <property name="poolConfig" ref="jedisPoolConfig"></property>
        </bean>
        <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
            <property name="connectionFactory" ref="connectionFactory" />
            <property name="defaultSerializer">
                <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
            </property>
        </bean>
    </beans>
    <beans profile="tester">
        <bean  class="org.lohas.bf.dao.common.SYS_GLOBAL"
              lazy-init="false">
            <property name="locations">
                <list>
                    <value>classpath*:config_tester.properties</value>
                </list>
            </property>
        </bean>
    </beans>
    <beans profile="product">
        <bean  class="org.lohas.bf.dao.common.SYS_GLOBAL"
              lazy-init="false">
            <property name="locations">
                <list>
                    <value>classpath*:config_product.properties</value>
                </list>
            </property>
        </bean>
    </beans>


</beans>